{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u041e\u0442\u0447\u0435\u0442 \u043f\u043e \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 2 \u0410\u043d\u0438\u0441\u0438\u043c\u043e\u0432\u0430 \u041a\u0441\u0435\u043d\u0438\u044f \u0421\u0435\u0440\u0433\u0435\u0435\u0432\u043d\u0430, \u041a3341","title":"Home"},{"location":"#2","text":"","title":"\u041e\u0442\u0447\u0435\u0442 \u043f\u043e \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 2"},{"location":"#3341","text":"","title":"\u0410\u043d\u0438\u0441\u0438\u043c\u043e\u0432\u0430 \u041a\u0441\u0435\u043d\u0438\u044f \u0421\u0435\u0440\u0433\u0435\u0435\u0432\u043d\u0430, \u041a3341"},{"location":"lab1/","text":"\u0414\u043e\u0431\u0440\u043e \u043f\u043e\u0436\u0430\u043b\u043e\u0432\u0430\u0442\u044c \u0432 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e \u043f\u0440\u043e\u0435\u043a\u0442\u0430! \u041e \u043f\u0440\u043e\u0435\u043a\u0442\u0435 \u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u0435\u0431-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u0432 \u0432 \u043f\u0443\u0442\u0435\u0448\u0435\u0441\u0442\u0432\u0438\u0435. models.py from enum import Enum from pydantic import BaseModel from sqlmodel import SQLModel, Field, Relationship from typing import List, Optional from datetime import date, datetime class OrganizerBase(SQLModel): name: str email: str class OrganizerProfile(OrganizerBase, table=True): __tablename__ = \"organizerprofile\" id: int = Field(default=None, primary_key=True) trips: List[\"Trip\"] = Relationship(back_populates=\"organizer\") class OrganizerCreate(OrganizerBase): pass class OrganizerRead(OrganizerBase): id: int class TripBase(SQLModel): destination: str start_date: date end_date: date description: Optional[str] = None class Trip(TripBase, table=True): __tablename__ = \"trip\" id: int = Field(default=None, primary_key=True) organizer_profile_id: Optional[int] = Field(default=None, foreign_key=\"organizerprofile.id\") user_id: Optional[int] = Field(default=None, foreign_key=\"user.id\") user: Optional[\"User\"] = Relationship(back_populates=\"trips\") organizer: Optional[\"OrganizerProfile\"] = Relationship(back_populates=\"trips\") trip_requests: List[\"TripRequest\"] = Relationship(back_populates=\"trip\") saved_by_users: List[\"SavedTrip\"] = Relationship(back_populates=\"trip\") class TripCreate(TripBase): organizer_profile_id: int user_id: Optional[int] = None class TripRead(TripBase): id: int organizer_profile_id: Optional[int] user_id: Optional[int] class UserBase(SQLModel): name: str email: str preferences: Optional[str] = None bio: Optional[str] = None class User(UserBase, table=True): __tablename__ = \"user\" id: int = Field(default=None, primary_key=True) trips: List[\"Trip\"] = Relationship(back_populates=\"user\") trip_requests: List[\"TripRequest\"] = Relationship(back_populates=\"user\") saved_trips: List[\"SavedTrip\"] = Relationship(back_populates=\"user\") class UserCreate(UserBase): pass class TripRequestStatus(str, Enum): pending = \"pending\" accepted = \"accepted\" rejected = \"rejected\" completed = \"completed\" cancelled = \"cancelled\" class TripRequestBase(SQLModel): status: TripRequestStatus = Field(default=TripRequestStatus.pending) class TripRequest(TripRequestBase, table=True): __tablename__ = \"triprequest\" id: int = Field(default=None, primary_key=True) user_id: int = Field(foreign_key=\"user.id\") trip_id: int = Field(foreign_key=\"trip.id\") user: \"User\" = Relationship(back_populates=\"trip_requests\") trip: \"Trip\" = Relationship(back_populates=\"trip_requests\") class TripRequestCreate(TripRequestBase): user_id: int trip_id: int class TripRequestRead(TripRequestBase): id: int user_id: int trip_id: int class TripUpdate(SQLModel): destination: Optional[str] = None start_date: Optional[date] = None end_date: Optional[date] = None description: Optional[str] = None organizer_profile_id: Optional[int] = None user_id: Optional[int] = None class UserRead(UserBase): id: int trips: List[TripRead] trip_requests: List[TripRequestRead] saved_trips: List[TripRead] class TripRequestWithDetails(TripRequestRead): trip: Optional[TripRead] user: Optional[UserRead] class UserUpdate(SQLModel): name: Optional[str] = None email: Optional[str] = None preferences: Optional[str] = None bio: Optional[str] = None class TripWithDetails(TripRead): user: Optional[UserRead] organizer: Optional[OrganizerRead] class SavedTrip(SQLModel, table=True): __tablename__ = \"savedtrip\" user_id: int = Field(foreign_key=\"user.id\", primary_key=True) trip_id: int = Field(foreign_key=\"trip.id\", primary_key=True) saved_at: Optional[date] = Field(default_factory=date.today) user: \"User\" = Relationship(back_populates=\"saved_trips\") trip: \"Trip\" = Relationship(back_populates=\"saved_by_users\") class MessageBase(BaseModel): content: str class Config: orm_mode = True class Message(SQLModel, table=True): id: int | None = Field(default=None, primary_key=True) sender_id: int = Field(foreign_key=\"user.id\") receiver_id: int = Field(foreign_key=\"user.id\") trip_id: int = Field(foreign_key=\"trip.id\") content: str timestamp: datetime = Field(default_factory=datetime.utcnow) sender: \"User\" = Relationship(sa_relationship_kwargs={\"foreign_keys\": \"[Message.sender_id]\"}) receiver: \"User\" = Relationship(sa_relationship_kwargs={\"foreign_keys\": \"[Message.receiver_id]\"}) trip: \"Trip\" = Relationship() class MessageCreate(MessageBase): sender_id: int receiver_id: int trip_id: int class MessageRead(MessageBase): id: int sender_id: int receiver_id: int trip_id: int timestamp: datetime class MessageUpdate(MessageBase): content: Optional[str] = None trips.py from fastapi import APIRouter, Depends, HTTPException, Query from sqlmodel import Session, select from sqlalchemy.orm import selectinload from db import get_session from models import * router = APIRouter() @router.post(\"/create\", response_model=TripRead) def create_trip(trip: TripCreate, session: Session = Depends(get_session)): db_trip = Trip.from_orm(trip) session.add(db_trip) session.commit() session.refresh(db_trip) return db_trip @router.get(\"/search\", response_model=List[TripRead]) def search_rides( destination: Optional[str] = Query(None), date: Optional[date] = Query(None), db: Session = Depends(get_session) ): query = select(Trip) if destination: query = query.where(Trip.destination == destination) if date: query = query.where(Trip.start_date <= date, Trip.end_date >= date) results = db.exec(query).all() return results @router.get(\"/{trip_id}\", response_model=TripWithDetails) def get_trip(trip_id: int, session: Session = Depends(get_session)): trip = session.get(Trip, trip_id) if not trip: raise HTTPException(status_code=404, detail=\"Trip not found\") return trip @router.get(\"/\", response_model=List[TripRead]) def list_trips(session: Session = Depends(get_session)): return session.query(Trip).all() @router.patch(\"/{trip_id}\", response_model=TripRead) def update_trip(trip_id: int, trip: TripUpdate, session: Session = Depends(get_session)): db_trip = session.get(Trip, trip_id) if not db_trip: raise HTTPException(status_code=404, detail=\"Trip not found\") trip_data = trip.model_dump(exclude_unset=True) for key, value in trip_data.items(): setattr(db_trip, key, value) session.commit() session.refresh(db_trip) return db_trip @router.delete(\"/delete/{trip_id}\") def delete_trip(trip_id: int, session: Session = Depends(get_session)): trip = session.get(Trip, trip_id) if not trip: raise HTTPException(status_code=404, detail=\"Trip not found\") for request in trip.trip_requests: session.delete(request) for saved_trip in trip.saved_by_users: session.delete(saved_trip) session.delete(trip) session.commit() return {\"status\": 200, \"message\": \"Trip deleted\"} @router.get(\"/{trip_id}/trip_requests\", response_model=List[TripRequestWithDetails]) def get_trip_requests(trip_id: int, session: Session = Depends(get_session)): trip_requests = session.exec( select(TripRequest) .options(selectinload(TripRequest.trip), selectinload(TripRequest.user)) .where(TripRequest.trip_id == trip_id) ).all() if not trip_requests: raise HTTPException(status_code=404, detail=\"No trip requests found\") return trip_requests @router.put(\"/update/{trip_id}\", response_model=TripRead) def update_trip(trip_id: int, trip: TripUpdate, session: Session = Depends(get_session)): db_trip = session.get(Trip, trip_id) if not db_trip: raise HTTPException(status_code=404, detail=\"Trip not found\") for key, value in trip.dict(exclude_unset=True).items(): setattr(db_trip, key, value) session.commit() session.refresh(db_trip) return db_trip @router.get(\"/trips_vlozhenn/{trip_id}\", response_model=TripWithDetails) def get_trip(trip_id: int, session: Session = Depends(get_session)): trip = session.exec( select(Trip) .options(selectinload(Trip.user), selectinload(Trip.organizer)) .where(Trip.id == trip_id) ).first() if not trip: raise HTTPException(status_code=404, detail=\"Trip not found\") return trip","title":"Lab 1"},{"location":"lab1/#_1","text":"","title":"\u0414\u043e\u0431\u0440\u043e \u043f\u043e\u0436\u0430\u043b\u043e\u0432\u0430\u0442\u044c \u0432 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e \u043f\u0440\u043e\u0435\u043a\u0442\u0430!"},{"location":"lab1/#_2","text":"","title":"\u041e \u043f\u0440\u043e\u0435\u043a\u0442\u0435"},{"location":"lab1/#-","text":"","title":"\u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0432\u0435\u0431-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u043f\u0430\u0440\u0442\u043d\u0435\u0440\u043e\u0432 \u0432 \u043f\u0443\u0442\u0435\u0448\u0435\u0441\u0442\u0432\u0438\u0435."},{"location":"lab1/#modelspy","text":"from enum import Enum from pydantic import BaseModel from sqlmodel import SQLModel, Field, Relationship from typing import List, Optional from datetime import date, datetime class OrganizerBase(SQLModel): name: str email: str class OrganizerProfile(OrganizerBase, table=True): __tablename__ = \"organizerprofile\" id: int = Field(default=None, primary_key=True) trips: List[\"Trip\"] = Relationship(back_populates=\"organizer\") class OrganizerCreate(OrganizerBase): pass class OrganizerRead(OrganizerBase): id: int class TripBase(SQLModel): destination: str start_date: date end_date: date description: Optional[str] = None class Trip(TripBase, table=True): __tablename__ = \"trip\" id: int = Field(default=None, primary_key=True) organizer_profile_id: Optional[int] = Field(default=None, foreign_key=\"organizerprofile.id\") user_id: Optional[int] = Field(default=None, foreign_key=\"user.id\") user: Optional[\"User\"] = Relationship(back_populates=\"trips\") organizer: Optional[\"OrganizerProfile\"] = Relationship(back_populates=\"trips\") trip_requests: List[\"TripRequest\"] = Relationship(back_populates=\"trip\") saved_by_users: List[\"SavedTrip\"] = Relationship(back_populates=\"trip\") class TripCreate(TripBase): organizer_profile_id: int user_id: Optional[int] = None class TripRead(TripBase): id: int organizer_profile_id: Optional[int] user_id: Optional[int] class UserBase(SQLModel): name: str email: str preferences: Optional[str] = None bio: Optional[str] = None class User(UserBase, table=True): __tablename__ = \"user\" id: int = Field(default=None, primary_key=True) trips: List[\"Trip\"] = Relationship(back_populates=\"user\") trip_requests: List[\"TripRequest\"] = Relationship(back_populates=\"user\") saved_trips: List[\"SavedTrip\"] = Relationship(back_populates=\"user\") class UserCreate(UserBase): pass class TripRequestStatus(str, Enum): pending = \"pending\" accepted = \"accepted\" rejected = \"rejected\" completed = \"completed\" cancelled = \"cancelled\" class TripRequestBase(SQLModel): status: TripRequestStatus = Field(default=TripRequestStatus.pending) class TripRequest(TripRequestBase, table=True): __tablename__ = \"triprequest\" id: int = Field(default=None, primary_key=True) user_id: int = Field(foreign_key=\"user.id\") trip_id: int = Field(foreign_key=\"trip.id\") user: \"User\" = Relationship(back_populates=\"trip_requests\") trip: \"Trip\" = Relationship(back_populates=\"trip_requests\") class TripRequestCreate(TripRequestBase): user_id: int trip_id: int class TripRequestRead(TripRequestBase): id: int user_id: int trip_id: int class TripUpdate(SQLModel): destination: Optional[str] = None start_date: Optional[date] = None end_date: Optional[date] = None description: Optional[str] = None organizer_profile_id: Optional[int] = None user_id: Optional[int] = None class UserRead(UserBase): id: int trips: List[TripRead] trip_requests: List[TripRequestRead] saved_trips: List[TripRead] class TripRequestWithDetails(TripRequestRead): trip: Optional[TripRead] user: Optional[UserRead] class UserUpdate(SQLModel): name: Optional[str] = None email: Optional[str] = None preferences: Optional[str] = None bio: Optional[str] = None class TripWithDetails(TripRead): user: Optional[UserRead] organizer: Optional[OrganizerRead] class SavedTrip(SQLModel, table=True): __tablename__ = \"savedtrip\" user_id: int = Field(foreign_key=\"user.id\", primary_key=True) trip_id: int = Field(foreign_key=\"trip.id\", primary_key=True) saved_at: Optional[date] = Field(default_factory=date.today) user: \"User\" = Relationship(back_populates=\"saved_trips\") trip: \"Trip\" = Relationship(back_populates=\"saved_by_users\") class MessageBase(BaseModel): content: str class Config: orm_mode = True class Message(SQLModel, table=True): id: int | None = Field(default=None, primary_key=True) sender_id: int = Field(foreign_key=\"user.id\") receiver_id: int = Field(foreign_key=\"user.id\") trip_id: int = Field(foreign_key=\"trip.id\") content: str timestamp: datetime = Field(default_factory=datetime.utcnow) sender: \"User\" = Relationship(sa_relationship_kwargs={\"foreign_keys\": \"[Message.sender_id]\"}) receiver: \"User\" = Relationship(sa_relationship_kwargs={\"foreign_keys\": \"[Message.receiver_id]\"}) trip: \"Trip\" = Relationship() class MessageCreate(MessageBase): sender_id: int receiver_id: int trip_id: int class MessageRead(MessageBase): id: int sender_id: int receiver_id: int trip_id: int timestamp: datetime class MessageUpdate(MessageBase): content: Optional[str] = None","title":"models.py"},{"location":"lab1/#tripspy","text":"from fastapi import APIRouter, Depends, HTTPException, Query from sqlmodel import Session, select from sqlalchemy.orm import selectinload from db import get_session from models import * router = APIRouter() @router.post(\"/create\", response_model=TripRead) def create_trip(trip: TripCreate, session: Session = Depends(get_session)): db_trip = Trip.from_orm(trip) session.add(db_trip) session.commit() session.refresh(db_trip) return db_trip @router.get(\"/search\", response_model=List[TripRead]) def search_rides( destination: Optional[str] = Query(None), date: Optional[date] = Query(None), db: Session = Depends(get_session) ): query = select(Trip) if destination: query = query.where(Trip.destination == destination) if date: query = query.where(Trip.start_date <= date, Trip.end_date >= date) results = db.exec(query).all() return results @router.get(\"/{trip_id}\", response_model=TripWithDetails) def get_trip(trip_id: int, session: Session = Depends(get_session)): trip = session.get(Trip, trip_id) if not trip: raise HTTPException(status_code=404, detail=\"Trip not found\") return trip @router.get(\"/\", response_model=List[TripRead]) def list_trips(session: Session = Depends(get_session)): return session.query(Trip).all() @router.patch(\"/{trip_id}\", response_model=TripRead) def update_trip(trip_id: int, trip: TripUpdate, session: Session = Depends(get_session)): db_trip = session.get(Trip, trip_id) if not db_trip: raise HTTPException(status_code=404, detail=\"Trip not found\") trip_data = trip.model_dump(exclude_unset=True) for key, value in trip_data.items(): setattr(db_trip, key, value) session.commit() session.refresh(db_trip) return db_trip @router.delete(\"/delete/{trip_id}\") def delete_trip(trip_id: int, session: Session = Depends(get_session)): trip = session.get(Trip, trip_id) if not trip: raise HTTPException(status_code=404, detail=\"Trip not found\") for request in trip.trip_requests: session.delete(request) for saved_trip in trip.saved_by_users: session.delete(saved_trip) session.delete(trip) session.commit() return {\"status\": 200, \"message\": \"Trip deleted\"} @router.get(\"/{trip_id}/trip_requests\", response_model=List[TripRequestWithDetails]) def get_trip_requests(trip_id: int, session: Session = Depends(get_session)): trip_requests = session.exec( select(TripRequest) .options(selectinload(TripRequest.trip), selectinload(TripRequest.user)) .where(TripRequest.trip_id == trip_id) ).all() if not trip_requests: raise HTTPException(status_code=404, detail=\"No trip requests found\") return trip_requests @router.put(\"/update/{trip_id}\", response_model=TripRead) def update_trip(trip_id: int, trip: TripUpdate, session: Session = Depends(get_session)): db_trip = session.get(Trip, trip_id) if not db_trip: raise HTTPException(status_code=404, detail=\"Trip not found\") for key, value in trip.dict(exclude_unset=True).items(): setattr(db_trip, key, value) session.commit() session.refresh(db_trip) return db_trip @router.get(\"/trips_vlozhenn/{trip_id}\", response_model=TripWithDetails) def get_trip(trip_id: int, session: Session = Depends(get_session)): trip = session.exec( select(Trip) .options(selectinload(Trip.user), selectinload(Trip.organizer)) .where(Trip.id == trip_id) ).first() if not trip: raise HTTPException(status_code=404, detail=\"Trip not found\") return trip","title":"trips.py"},{"location":"task1/","text":"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b Threading import threading import time def part_sum(start, end, result, index): result[index] = sum(range(start, end)) def calculate_sum_threading(n, num_threads): step = n // num_threads threads = [] result = [0] * num_threads for i in range(num_threads): start = i * step + 1 end = n + 1 if i == num_threads - 1 else (i + 1) * step + 1 t = threading.Thread(target=part_sum, args=(start, end, result, i)) threads.append(t) t.start() for t in threads: t.join() return sum(result) if __name__ == \"__main__\": n = 10 ** 9 start_time = time.time() total = calculate_sum_threading(n, 5) print(\"\u0421\u0443\u043c\u043c\u0430:\", total) print(\"\u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f:\", time.time() - start_time, \"\u0441\u0435\u043a\") Multiprocessing from multiprocessing import Pool import time def part_sum(args): start, end = args return sum(range(start, end)) def calculate_sum_multiprocessing(n, num_processes): step = n // num_processes ranges = [(i * step + 1, n + 1 if i == num_processes - 1 else (i + 1) * step + 1) for i in range(num_processes)] with Pool(processes=num_processes) as pool: results = pool.map(part_sum, ranges) return sum(results) if __name__ == \"__main__\": n = 10 ** 9 start_time = time.time() total = calculate_sum_multiprocessing(n, 5) print(\"\u0421\u0443\u043c\u043c\u0430:\", total) print(\"\u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f:\", time.time() - start_time, \"\u0441\u0435\u043a\") Async import asyncio import time async def partial_sum(start, end): return sum(range(start, end)) async def calculate_sum(n, num_tasks): step = n // num_tasks tasks = [] for i in range(num_tasks): start = i * step + 1 end = n + 1 if i == num_tasks - 1 else (i + 1) * step + 1 tasks.append(asyncio.create_task(partial_sum(start, end))) results = await asyncio.gather(*tasks) return sum(results) if __name__ == \"__main__\": n = 10 ** 9 start_time = time.time() result = asyncio.run(calculate_sum(n, 5)) print(\"\u0421\u0443\u043c\u043c\u0430:\", result) print(\"\u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f:\", time.time() - start_time, \"\u0441\u0435\u043a\") \u0412\u044b\u0432\u043e\u0434: \u041d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u043c \u0434\u043b\u044f \u0426\u041f\u0423 \u0437\u0430\u0434\u0430\u0447 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043c\u0443\u043b\u044c\u0442\u0438\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0438\u043d\u0433.","title":"Task 1"},{"location":"task1/#_1","text":"Threading import threading import time def part_sum(start, end, result, index): result[index] = sum(range(start, end)) def calculate_sum_threading(n, num_threads): step = n // num_threads threads = [] result = [0] * num_threads for i in range(num_threads): start = i * step + 1 end = n + 1 if i == num_threads - 1 else (i + 1) * step + 1 t = threading.Thread(target=part_sum, args=(start, end, result, i)) threads.append(t) t.start() for t in threads: t.join() return sum(result) if __name__ == \"__main__\": n = 10 ** 9 start_time = time.time() total = calculate_sum_threading(n, 5) print(\"\u0421\u0443\u043c\u043c\u0430:\", total) print(\"\u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f:\", time.time() - start_time, \"\u0441\u0435\u043a\") Multiprocessing from multiprocessing import Pool import time def part_sum(args): start, end = args return sum(range(start, end)) def calculate_sum_multiprocessing(n, num_processes): step = n // num_processes ranges = [(i * step + 1, n + 1 if i == num_processes - 1 else (i + 1) * step + 1) for i in range(num_processes)] with Pool(processes=num_processes) as pool: results = pool.map(part_sum, ranges) return sum(results) if __name__ == \"__main__\": n = 10 ** 9 start_time = time.time() total = calculate_sum_multiprocessing(n, 5) print(\"\u0421\u0443\u043c\u043c\u0430:\", total) print(\"\u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f:\", time.time() - start_time, \"\u0441\u0435\u043a\") Async import asyncio import time async def partial_sum(start, end): return sum(range(start, end)) async def calculate_sum(n, num_tasks): step = n // num_tasks tasks = [] for i in range(num_tasks): start = i * step + 1 end = n + 1 if i == num_tasks - 1 else (i + 1) * step + 1 tasks.append(asyncio.create_task(partial_sum(start, end))) results = await asyncio.gather(*tasks) return sum(results) if __name__ == \"__main__\": n = 10 ** 9 start_time = time.time() result = asyncio.run(calculate_sum(n, 5)) print(\"\u0421\u0443\u043c\u043c\u0430:\", result) print(\"\u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f:\", time.time() - start_time, \"\u0441\u0435\u043a\")","title":"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b"},{"location":"task1/#_2","text":"\u041d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u044b\u043c \u0434\u043b\u044f \u0426\u041f\u0423 \u0437\u0430\u0434\u0430\u0447 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043c\u0443\u043b\u044c\u0442\u0438\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0438\u043d\u0433.","title":"\u0412\u044b\u0432\u043e\u0434:"},{"location":"task2/","text":"\u041f\u0430\u0440\u0441\u0438\u043d\u0433 \u0438 \u0440\u0430\u0431\u043e\u0442\u0430 \u0441 \u0411\u0414 \u0414\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0431\u044b\u043b \u0432\u044b\u0431\u0440\u0430\u043d \u0441\u0430\u0439\u0442 https://ru.wikipedia.org/. \u0410 \u0438\u043c\u0435\u043d\u043d\u043e: urls = [ https://ru.wikipedia.org/wiki/\u0410\u0431\u0431\u0430\u0434\u0438\u044f_(\u0437\u0430\u043c\u043e\u043a), https://ru.wikipedia.org/wiki/\u0410\u0440\u0430\u0433\u043e\u043d\u0441\u043a\u0438\u0439_\u0437\u0430\u043c\u043e\u043a_(\u0420\u0435\u0434\u0436\u043e-\u0434\u0438-\u041a\u0430\u043b\u0430\u0431\u0440\u0438\u044f), https://ru.wikipedia.org/wiki/\u0410\u0440\u043a\u043e_(\u0437\u0430\u043c\u043e\u043a), https://ru.wikipedia.org/wiki/\u0411\u0430\u0440\u0434\u0438_(\u0437\u0430\u043c\u043e\u043a), https://ru.wikipedia.org/wiki/\u0411\u0430\u0448\u043d\u044f_\u0412\u0430\u043d\u0433\u0430, https://ru.wikipedia.org/wiki/\u0417\u0430\u043c\u043e\u043a_\u0411\u0443\u043e\u043d\u043a\u043e\u043d\u0441\u0438\u043b\u044c\u043e, https://ru.wikipedia.org/wiki/\u0412\u0438\u0433\u043e\u043b\u0435\u043d\u043e_(\u0437\u0430\u043c\u043e\u043a), https://ru.wikipedia.org/wiki/\u0413\u0430\u043b\u0435\u0440\u0435\u044f_\u0412\u0438\u043a\u0442\u043e\u0440\u0430_\u042d\u043c\u043c\u0430\u043d\u0443\u0438\u043b\u0430_II, https://ru.wikipedia.org/wiki/\u0414\u043e\u0440\u043e\u0433\u0430_\u043b\u044e\u0431\u0432\u0438, https://ru.wikipedia.org/wiki/\u041b\u043e\u043c\u0431\u0430\u0440\u0434\u043e,_\u0420\u043e\u0437\u0430\u043b\u0438\u044f, https://ru.wikipedia.org/wiki/\u041c\u0430\u0440\u043e\u0441\u0442\u0438\u043a\u0441\u043a\u0438\u0439_\u043f\u0440\u0430\u0437\u0434\u043d\u0438\u043a_\u0448\u0430\u0445\u043c\u0430\u0442, https://ru.wikipedia.org/wiki/\u041c\u0435\u0433\u0430\u043b\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435_\u043b\u0438\u0446\u043e_\u0432_\u0411\u043e\u0440\u0446\u043e\u043d\u0435, https://ru.wikipedia.org/wiki/\u041f\u0430\u0432\u043e\u043d\u0435-\u041a\u0430\u043d\u0430\u0432\u0435\u0437\u0435_(\u0437\u0430\u043c\u043e\u043a), https://ru.wikipedia.org/wiki/\u041f\u0430\u043b\u0430\u0446\u0446\u043e_\u0434\u0435\u043b\u043b\u0435_\u0410\u043b\u044c\u0431\u0435\u0440\u0435, https://ru.wikipedia.org/wiki/\u041f\u0430\u043b\u0430\u0446\u0446\u043e_\u041a\u043e\u043c\u0443\u043d\u0430\u043b\u0435_(\u0424\u043e\u0440\u043b\u0438), https://ru.wikipedia.org/wiki/\u041f\u043b\u043e\u0449\u0430\u0434\u044c_\u0421\u0430\u0444\u0444\u0438, https://ru.wikipedia.org/wiki/\u041f\u044c\u044f\u0446\u0446\u0430-\u0434\u0435\u043b\u043b\u0430-\u0427\u0438\u0441\u0442\u0435\u0440\u043d\u0430, https://ru.wikipedia.org/wiki/\u041f\u044c\u044f\u0446\u0446\u0430-\u0434\u0435\u043b\u044c-\u0414\u0443\u043e\u043c\u043e_(\u0421\u0430\u043d-\u0414\u0436\u0438\u043c\u0438\u043d\u044c\u044f\u043d\u043e), https://ru.wikipedia.org/wiki/\u0420\u043e\u043a\u043a\u0430-\u041a\u0430\u043b\u0430\u0448\u0438\u043e_(\u0437\u0430\u043c\u043e\u043a), https://ru.wikipedia.org/wiki/\u0421\u0430\u0432\u043e\u0439\u044f_(\u0437\u0430\u043c\u043e\u043a), https://ru.wikipedia.org/wiki/\u0421\u043e\u0431\u043e\u0440_\u0421\u0430\u043d-\u0414\u0436\u0438\u043c\u0438\u043d\u044c\u044f\u043d\u043e, https://ru.wikipedia.org/wiki/\u0422\u0438\u0440\u043e\u043b\u044c_(\u0437\u0430\u043c\u043e\u043a), https://ru.wikipedia.org/wiki/\u0422\u043e\u0440\u0440\u0435_\u0420\u043e\u0441\u0441\u0430, https://ru.wikipedia.org/wiki/\u0422\u043e\u0440\u0440\u0435\u043a\u044c\u044f\u0440\u0430_(\u0437\u0430\u043c\u043e\u043a), https://ru.wikipedia.org/wiki/\u0426\u0438\u0442\u0430\u0434\u0435\u043b\u044c_\u0420\u0430\u0432\u0430\u043b\u044c\u0434\u0438\u043d\u043e, https://ru.wikipedia.org/wiki/\u042d\u043d\u043d_(\u0437\u0430\u043c\u043e\u043a), ] \u041a\u043e\u0434 DB from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession from sqlalchemy.orm import sessionmaker from sqlmodel import SQLModel import os from dotenv import load_dotenv load_dotenv() db_url = os.getenv('DATABASE_URL', \"postgresql+asyncpg://username:password@localhost/dbname\") engine = create_async_engine(db_url, echo=True) AsyncSessionLocal = sessionmaker( bind=engine, class_=AsyncSession, expire_on_commit=False, autocommit=False, autoflush=False, ) async def get_session() -> AsyncSession: async with AsyncSessionLocal() as session: try: yield session finally: await session.close() async def init_db(): async with engine.begin() as conn: await conn.run_sync(SQLModel.metadata.create_all) Models from enum import Enum from pydantic import BaseModel from sqlmodel import SQLModel, Field, Relationship from typing import List, Optional from datetime import date, datetime class OrganizerBase(SQLModel): name: str email: str class OrganizerProfile(OrganizerBase, table=True): __tablename__ = \"organizerprofile\" id: int = Field(default=None, primary_key=True) trips: List[\"Trip\"] = Relationship(back_populates=\"organizer\") class OrganizerCreate(OrganizerBase): pass class OrganizerRead(OrganizerBase): id: int class TripBase(SQLModel): destination: str start_date: Optional[date] = None end_date: Optional[date] = None description: Optional[str] = None class Config: from_attributes = True class Trip(TripBase, table=True): __tablename__ = \"trip\" id: int = Field(default=None, primary_key=True) organizer_profile_id: Optional[int] = Field(default=None, foreign_key=\"organizerprofile.id\") user_id: Optional[int] = Field(default=None, foreign_key=\"user.id\") user: Optional[\"User\"] = Relationship(back_populates=\"trips\") organizer: Optional[\"OrganizerProfile\"] = Relationship(back_populates=\"trips\") trip_requests: List[\"TripRequest\"] = Relationship(back_populates=\"trip\") saved_by_users: List[\"SavedTrip\"] = Relationship(back_populates=\"trip\") class TripCreate(TripBase): organizer_profile_id: int user_id: Optional[int] = None class TripRead(TripBase): id: int organizer_profile_id: Optional[int] user_id: Optional[int] class UserBase(SQLModel): name: str email: str preferences: Optional[str] = None bio: Optional[str] = None class User(UserBase, table=True): __tablename__ = \"user\" id: int = Field(default=None, primary_key=True) trips: List[\"Trip\"] = Relationship(back_populates=\"user\") trip_requests: List[\"TripRequest\"] = Relationship(back_populates=\"user\") saved_trips: List[\"SavedTrip\"] = Relationship(back_populates=\"user\") class UserCreate(UserBase): pass class TripRequestStatus(str, Enum): pending = \"pending\" accepted = \"accepted\" rejected = \"rejected\" completed = \"completed\" cancelled = \"cancelled\" class TripRequestBase(SQLModel): status: TripRequestStatus = Field(default=TripRequestStatus.pending) class TripRequest(TripRequestBase, table=True): __tablename__ = \"triprequest\" id: int = Field(default=None, primary_key=True) user_id: int = Field(foreign_key=\"user.id\") trip_id: int = Field(foreign_key=\"trip.id\") user: \"User\" = Relationship(back_populates=\"trip_requests\") trip: \"Trip\" = Relationship(back_populates=\"trip_requests\") class TripRequestCreate(TripRequestBase): user_id: int trip_id: int class TripRequestRead(TripRequestBase): id: int user_id: int trip_id: int class TripUpdate(SQLModel): destination: Optional[str] = None start_date: Optional[date] = None end_date: Optional[date] = None description: Optional[str] = None organizer_profile_id: Optional[int] = None user_id: Optional[int] = None class SavedTripWithDetails(BaseModel): trip_id: int user_id: int saved_at: date trip: TripRead class Config: orm_mode = True class UserRead(UserBase): id: int trips: List[TripRead] trip_requests: List[TripRequestRead] saved_trips: List[SavedTripWithDetails] class TripRequestWithDetails(TripRequestRead): trip: Optional[TripRead] user: Optional[UserRead] class UserUpdate(SQLModel): name: Optional[str] = None email: Optional[str] = None preferences: Optional[str] = None bio: Optional[str] = None class TripWithDetails(TripRead): user: Optional[UserRead] organizer: Optional[OrganizerRead] class SavedTrip(SQLModel, table=True): __tablename__ = \"savedtrip\" user_id: int = Field(foreign_key=\"user.id\", primary_key=True) trip_id: int = Field(foreign_key=\"trip.id\", primary_key=True) saved_at: Optional[date] = Field(default_factory=date.today) user: \"User\" = Relationship(back_populates=\"saved_trips\") trip: \"Trip\" = Relationship(back_populates=\"saved_by_users\") class MessageBase(BaseModel): content: str class Config: orm_mode = True class Message(SQLModel, table=True): id: int | None = Field(default=None, primary_key=True) sender_id: int = Field(foreign_key=\"user.id\") receiver_id: int = Field(foreign_key=\"user.id\") trip_id: int = Field(foreign_key=\"trip.id\") content: str timestamp: datetime = Field(default_factory=datetime.utcnow) sender: \"User\" = Relationship(sa_relationship_kwargs={\"foreign_keys\": \"[Message.sender_id]\"}) receiver: \"User\" = Relationship(sa_relationship_kwargs={\"foreign_keys\": \"[Message.receiver_id]\"}) trip: \"Trip\" = Relationship() class MessageCreate(MessageBase): sender_id: int receiver_id: int trip_id: int class MessageRead(MessageBase): id: int sender_id: int receiver_id: int trip_id: int timestamp: datetime class MessageUpdate(MessageBase): content: Optional[str] = None class SaveTripRequest(BaseModel): user_id: int trip_id: int class SavedTripDelete(BaseModel): user_id: int trip_id: int \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b Threading import threading import requests from bs4 import BeautifulSoup from db import get_session from models import Trip import time def load_urls(filename): with open(filename, encoding='utf-8') as f: return [line.strip() for line in f if line.strip()] def parse_and_save(url): try: response = requests.get(url) soup = BeautifulSoup(response.content, 'html.parser') title_element = soup.find('h1', id='firstHeading') destination = title_element.get_text(strip=True) if title_element else \"\u041d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e\" description = \"\" for p in soup.find('div', class_='mw-parser-output').find_all('p'): text = p.get_text(strip=True) if text: description += text + \" \" if len(description) > 1000: break if not description.strip(): description = \"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442.\" with get_session() as session: session.add(Trip(destination=destination, description=description)) session.commit() print(f\"[Thread] {destination} \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0430.\") except Exception as e: print(f\"[Thread Error] {url}: {e}\") def handle_url_threading(chunk): for url in chunk: parse_and_save(url) def main(): urls = load_urls(\"urls.txt\") num_threads = 5 step = len(urls) // num_threads threads = [] for i in range(num_threads): start = i * step end = len(urls) if i == num_threads - 1 else (i + 1) * step t = threading.Thread(target=handle_url_threading, args=(urls[start:end],)) threads.append(t) t.start() for t in threads: t.join() if __name__ == \"__main__\": start = time.time() main() print(f\"\u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f: {time.time() - start:.2f} \u0441\u0435\u043a\") \u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f: 1.42 \u0441\u0435\u043a Multiprocessing from multiprocessing import Pool import requests from bs4 import BeautifulSoup from db import get_session from models import Trip def load_urls(filename): with open(filename, encoding='utf-8') as f: return [line.strip() for line in f if line.strip()] def parse_and_save(url): try: response = requests.get(url) soup = BeautifulSoup(response.content, 'html.parser') title_element = soup.find('h1', id='firstHeading') destination = title_element.get_text(strip=True) if title_element else \"\u041d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e\" description = \"\" content_div = soup.find('div', class_='mw-parser-output') if content_div: for p in content_div.find_all('p'): text = p.get_text(strip=True) if text: description += text + \" \" if len(description) > 1000: break if not description.strip(): description = \"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442.\" with get_session() as session: session.add(Trip(destination=destination, description=description)) session.commit() print(f\"[Process] {destination} \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0430.\") except Exception as e: print(f\"[Process Error] {url}: {e}\") def handle_url_multi(chunk): for url in chunk: parse_and_save(url) def main(): urls = load_urls(\"urls.txt\") num_processes = 5 chunk_size = len(urls) // num_processes chunks = [urls[i * chunk_size: (i + 1) * chunk_size] for i in range(num_processes - 1)] chunks.append(urls[(num_processes - 1) * chunk_size:]) with Pool(processes=num_processes) as pool: pool.map(handle_url_multi, chunks) if __name__ == \"__main__\": import time start = time.time() main() print(f\"\u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f: {time.time() - start:.2f} \u0441\u0435\u043a\") \u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f: 2.07 \u0441\u0435\u043a Async import aiohttp import asyncio from bs4 import BeautifulSoup from db import get_session from models import Trip def load_urls(filename): with open(filename, encoding='utf-8') as f: return [line.strip() for line in f if line.strip()] async def fetch(session, url): try: async with session.get(url, timeout=aiohttp.ClientTimeout(total=10)) as response: return await response.text(), url except Exception as e: print(f\"[Fetch Error] {url}: {e}\") return \"\", url async def parse_and_save(html, url): try: soup = BeautifulSoup(html, 'html.parser') title_element = soup.find('h1', id='firstHeading') destination = title_element.get_text(strip=True) if title_element else \"\u041d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e\" description = \"\" content_div = soup.find('div', class_='mw-parser-output') if content_div: for p in content_div.find_all('p'): text = p.get_text(strip=True) if text: description += text + \" \" if len(description) > 1000: break if not description.strip(): description = \"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442.\" with get_session() as session: session.add(Trip(destination=destination, description=description)) session.commit() print(f\"[Async] {destination} \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0430.\") except Exception as e: print(f\"[Async Error] {url}: {e}\") async def handle_url_async(chunk): async with aiohttp.ClientSession() as session: htmls = await asyncio.gather(*(fetch(session, url) for url in chunk)) await asyncio.gather(*(parse_and_save(html, url) for html, url in htmls if html)) async def main(): urls = load_urls(\"urls.txt\") num_chunks = 5 chunk_size = len(urls) // num_chunks chunks = [urls[i * chunk_size: (i + 1) * chunk_size] for i in range(num_chunks - 1)] chunks.append(urls[(num_chunks - 1) * chunk_size:]) await asyncio.gather(*(handle_url_async(chunk) for chunk in chunks)) if __name__ == \"__main__\": import time start = time.time() asyncio.run(main()) print(f\"\u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f: {time.time() - start:.2f} \u0441\u0435\u043a\") \u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f: 0.11 \u0441\u0435\u043a \u0412\u044b\u0432\u043e\u0434 \u041c\u043e\u0436\u043d\u043e \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0432\u044b\u0432\u043e\u0434, \u0447\u0442\u043e \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u0435\u0435 \u0432\u0441\u0435\u0433\u043e \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434, \u043d\u043e \u0431\u044b\u043b\u043e, \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u043c\u0430\u043b\u043e \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430.","title":"Task 2"},{"location":"task2/#_1","text":"\u0414\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0431\u044b\u043b \u0432\u044b\u0431\u0440\u0430\u043d \u0441\u0430\u0439\u0442 https://ru.wikipedia.org/. \u0410 \u0438\u043c\u0435\u043d\u043d\u043e: urls = [ https://ru.wikipedia.org/wiki/\u0410\u0431\u0431\u0430\u0434\u0438\u044f_(\u0437\u0430\u043c\u043e\u043a), https://ru.wikipedia.org/wiki/\u0410\u0440\u0430\u0433\u043e\u043d\u0441\u043a\u0438\u0439_\u0437\u0430\u043c\u043e\u043a_(\u0420\u0435\u0434\u0436\u043e-\u0434\u0438-\u041a\u0430\u043b\u0430\u0431\u0440\u0438\u044f), https://ru.wikipedia.org/wiki/\u0410\u0440\u043a\u043e_(\u0437\u0430\u043c\u043e\u043a), https://ru.wikipedia.org/wiki/\u0411\u0430\u0440\u0434\u0438_(\u0437\u0430\u043c\u043e\u043a), https://ru.wikipedia.org/wiki/\u0411\u0430\u0448\u043d\u044f_\u0412\u0430\u043d\u0433\u0430, https://ru.wikipedia.org/wiki/\u0417\u0430\u043c\u043e\u043a_\u0411\u0443\u043e\u043d\u043a\u043e\u043d\u0441\u0438\u043b\u044c\u043e, https://ru.wikipedia.org/wiki/\u0412\u0438\u0433\u043e\u043b\u0435\u043d\u043e_(\u0437\u0430\u043c\u043e\u043a), https://ru.wikipedia.org/wiki/\u0413\u0430\u043b\u0435\u0440\u0435\u044f_\u0412\u0438\u043a\u0442\u043e\u0440\u0430_\u042d\u043c\u043c\u0430\u043d\u0443\u0438\u043b\u0430_II, https://ru.wikipedia.org/wiki/\u0414\u043e\u0440\u043e\u0433\u0430_\u043b\u044e\u0431\u0432\u0438, https://ru.wikipedia.org/wiki/\u041b\u043e\u043c\u0431\u0430\u0440\u0434\u043e,_\u0420\u043e\u0437\u0430\u043b\u0438\u044f, https://ru.wikipedia.org/wiki/\u041c\u0430\u0440\u043e\u0441\u0442\u0438\u043a\u0441\u043a\u0438\u0439_\u043f\u0440\u0430\u0437\u0434\u043d\u0438\u043a_\u0448\u0430\u0445\u043c\u0430\u0442, https://ru.wikipedia.org/wiki/\u041c\u0435\u0433\u0430\u043b\u0438\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0435_\u043b\u0438\u0446\u043e_\u0432_\u0411\u043e\u0440\u0446\u043e\u043d\u0435, https://ru.wikipedia.org/wiki/\u041f\u0430\u0432\u043e\u043d\u0435-\u041a\u0430\u043d\u0430\u0432\u0435\u0437\u0435_(\u0437\u0430\u043c\u043e\u043a), https://ru.wikipedia.org/wiki/\u041f\u0430\u043b\u0430\u0446\u0446\u043e_\u0434\u0435\u043b\u043b\u0435_\u0410\u043b\u044c\u0431\u0435\u0440\u0435, https://ru.wikipedia.org/wiki/\u041f\u0430\u043b\u0430\u0446\u0446\u043e_\u041a\u043e\u043c\u0443\u043d\u0430\u043b\u0435_(\u0424\u043e\u0440\u043b\u0438), https://ru.wikipedia.org/wiki/\u041f\u043b\u043e\u0449\u0430\u0434\u044c_\u0421\u0430\u0444\u0444\u0438, https://ru.wikipedia.org/wiki/\u041f\u044c\u044f\u0446\u0446\u0430-\u0434\u0435\u043b\u043b\u0430-\u0427\u0438\u0441\u0442\u0435\u0440\u043d\u0430, https://ru.wikipedia.org/wiki/\u041f\u044c\u044f\u0446\u0446\u0430-\u0434\u0435\u043b\u044c-\u0414\u0443\u043e\u043c\u043e_(\u0421\u0430\u043d-\u0414\u0436\u0438\u043c\u0438\u043d\u044c\u044f\u043d\u043e), https://ru.wikipedia.org/wiki/\u0420\u043e\u043a\u043a\u0430-\u041a\u0430\u043b\u0430\u0448\u0438\u043e_(\u0437\u0430\u043c\u043e\u043a), https://ru.wikipedia.org/wiki/\u0421\u0430\u0432\u043e\u0439\u044f_(\u0437\u0430\u043c\u043e\u043a), https://ru.wikipedia.org/wiki/\u0421\u043e\u0431\u043e\u0440_\u0421\u0430\u043d-\u0414\u0436\u0438\u043c\u0438\u043d\u044c\u044f\u043d\u043e, https://ru.wikipedia.org/wiki/\u0422\u0438\u0440\u043e\u043b\u044c_(\u0437\u0430\u043c\u043e\u043a), https://ru.wikipedia.org/wiki/\u0422\u043e\u0440\u0440\u0435_\u0420\u043e\u0441\u0441\u0430, https://ru.wikipedia.org/wiki/\u0422\u043e\u0440\u0440\u0435\u043a\u044c\u044f\u0440\u0430_(\u0437\u0430\u043c\u043e\u043a), https://ru.wikipedia.org/wiki/\u0426\u0438\u0442\u0430\u0434\u0435\u043b\u044c_\u0420\u0430\u0432\u0430\u043b\u044c\u0434\u0438\u043d\u043e, https://ru.wikipedia.org/wiki/\u042d\u043d\u043d_(\u0437\u0430\u043c\u043e\u043a), ]","title":"\u041f\u0430\u0440\u0441\u0438\u043d\u0433 \u0438 \u0440\u0430\u0431\u043e\u0442\u0430 \u0441 \u0411\u0414"},{"location":"task2/#_2","text":"DB from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession from sqlalchemy.orm import sessionmaker from sqlmodel import SQLModel import os from dotenv import load_dotenv load_dotenv() db_url = os.getenv('DATABASE_URL', \"postgresql+asyncpg://username:password@localhost/dbname\") engine = create_async_engine(db_url, echo=True) AsyncSessionLocal = sessionmaker( bind=engine, class_=AsyncSession, expire_on_commit=False, autocommit=False, autoflush=False, ) async def get_session() -> AsyncSession: async with AsyncSessionLocal() as session: try: yield session finally: await session.close() async def init_db(): async with engine.begin() as conn: await conn.run_sync(SQLModel.metadata.create_all) Models from enum import Enum from pydantic import BaseModel from sqlmodel import SQLModel, Field, Relationship from typing import List, Optional from datetime import date, datetime class OrganizerBase(SQLModel): name: str email: str class OrganizerProfile(OrganizerBase, table=True): __tablename__ = \"organizerprofile\" id: int = Field(default=None, primary_key=True) trips: List[\"Trip\"] = Relationship(back_populates=\"organizer\") class OrganizerCreate(OrganizerBase): pass class OrganizerRead(OrganizerBase): id: int class TripBase(SQLModel): destination: str start_date: Optional[date] = None end_date: Optional[date] = None description: Optional[str] = None class Config: from_attributes = True class Trip(TripBase, table=True): __tablename__ = \"trip\" id: int = Field(default=None, primary_key=True) organizer_profile_id: Optional[int] = Field(default=None, foreign_key=\"organizerprofile.id\") user_id: Optional[int] = Field(default=None, foreign_key=\"user.id\") user: Optional[\"User\"] = Relationship(back_populates=\"trips\") organizer: Optional[\"OrganizerProfile\"] = Relationship(back_populates=\"trips\") trip_requests: List[\"TripRequest\"] = Relationship(back_populates=\"trip\") saved_by_users: List[\"SavedTrip\"] = Relationship(back_populates=\"trip\") class TripCreate(TripBase): organizer_profile_id: int user_id: Optional[int] = None class TripRead(TripBase): id: int organizer_profile_id: Optional[int] user_id: Optional[int] class UserBase(SQLModel): name: str email: str preferences: Optional[str] = None bio: Optional[str] = None class User(UserBase, table=True): __tablename__ = \"user\" id: int = Field(default=None, primary_key=True) trips: List[\"Trip\"] = Relationship(back_populates=\"user\") trip_requests: List[\"TripRequest\"] = Relationship(back_populates=\"user\") saved_trips: List[\"SavedTrip\"] = Relationship(back_populates=\"user\") class UserCreate(UserBase): pass class TripRequestStatus(str, Enum): pending = \"pending\" accepted = \"accepted\" rejected = \"rejected\" completed = \"completed\" cancelled = \"cancelled\" class TripRequestBase(SQLModel): status: TripRequestStatus = Field(default=TripRequestStatus.pending) class TripRequest(TripRequestBase, table=True): __tablename__ = \"triprequest\" id: int = Field(default=None, primary_key=True) user_id: int = Field(foreign_key=\"user.id\") trip_id: int = Field(foreign_key=\"trip.id\") user: \"User\" = Relationship(back_populates=\"trip_requests\") trip: \"Trip\" = Relationship(back_populates=\"trip_requests\") class TripRequestCreate(TripRequestBase): user_id: int trip_id: int class TripRequestRead(TripRequestBase): id: int user_id: int trip_id: int class TripUpdate(SQLModel): destination: Optional[str] = None start_date: Optional[date] = None end_date: Optional[date] = None description: Optional[str] = None organizer_profile_id: Optional[int] = None user_id: Optional[int] = None class SavedTripWithDetails(BaseModel): trip_id: int user_id: int saved_at: date trip: TripRead class Config: orm_mode = True class UserRead(UserBase): id: int trips: List[TripRead] trip_requests: List[TripRequestRead] saved_trips: List[SavedTripWithDetails] class TripRequestWithDetails(TripRequestRead): trip: Optional[TripRead] user: Optional[UserRead] class UserUpdate(SQLModel): name: Optional[str] = None email: Optional[str] = None preferences: Optional[str] = None bio: Optional[str] = None class TripWithDetails(TripRead): user: Optional[UserRead] organizer: Optional[OrganizerRead] class SavedTrip(SQLModel, table=True): __tablename__ = \"savedtrip\" user_id: int = Field(foreign_key=\"user.id\", primary_key=True) trip_id: int = Field(foreign_key=\"trip.id\", primary_key=True) saved_at: Optional[date] = Field(default_factory=date.today) user: \"User\" = Relationship(back_populates=\"saved_trips\") trip: \"Trip\" = Relationship(back_populates=\"saved_by_users\") class MessageBase(BaseModel): content: str class Config: orm_mode = True class Message(SQLModel, table=True): id: int | None = Field(default=None, primary_key=True) sender_id: int = Field(foreign_key=\"user.id\") receiver_id: int = Field(foreign_key=\"user.id\") trip_id: int = Field(foreign_key=\"trip.id\") content: str timestamp: datetime = Field(default_factory=datetime.utcnow) sender: \"User\" = Relationship(sa_relationship_kwargs={\"foreign_keys\": \"[Message.sender_id]\"}) receiver: \"User\" = Relationship(sa_relationship_kwargs={\"foreign_keys\": \"[Message.receiver_id]\"}) trip: \"Trip\" = Relationship() class MessageCreate(MessageBase): sender_id: int receiver_id: int trip_id: int class MessageRead(MessageBase): id: int sender_id: int receiver_id: int trip_id: int timestamp: datetime class MessageUpdate(MessageBase): content: Optional[str] = None class SaveTripRequest(BaseModel): user_id: int trip_id: int class SavedTripDelete(BaseModel): user_id: int trip_id: int","title":"\u041a\u043e\u0434"},{"location":"task2/#_3","text":"Threading import threading import requests from bs4 import BeautifulSoup from db import get_session from models import Trip import time def load_urls(filename): with open(filename, encoding='utf-8') as f: return [line.strip() for line in f if line.strip()] def parse_and_save(url): try: response = requests.get(url) soup = BeautifulSoup(response.content, 'html.parser') title_element = soup.find('h1', id='firstHeading') destination = title_element.get_text(strip=True) if title_element else \"\u041d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e\" description = \"\" for p in soup.find('div', class_='mw-parser-output').find_all('p'): text = p.get_text(strip=True) if text: description += text + \" \" if len(description) > 1000: break if not description.strip(): description = \"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442.\" with get_session() as session: session.add(Trip(destination=destination, description=description)) session.commit() print(f\"[Thread] {destination} \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0430.\") except Exception as e: print(f\"[Thread Error] {url}: {e}\") def handle_url_threading(chunk): for url in chunk: parse_and_save(url) def main(): urls = load_urls(\"urls.txt\") num_threads = 5 step = len(urls) // num_threads threads = [] for i in range(num_threads): start = i * step end = len(urls) if i == num_threads - 1 else (i + 1) * step t = threading.Thread(target=handle_url_threading, args=(urls[start:end],)) threads.append(t) t.start() for t in threads: t.join() if __name__ == \"__main__\": start = time.time() main() print(f\"\u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f: {time.time() - start:.2f} \u0441\u0435\u043a\") \u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f: 1.42 \u0441\u0435\u043a Multiprocessing from multiprocessing import Pool import requests from bs4 import BeautifulSoup from db import get_session from models import Trip def load_urls(filename): with open(filename, encoding='utf-8') as f: return [line.strip() for line in f if line.strip()] def parse_and_save(url): try: response = requests.get(url) soup = BeautifulSoup(response.content, 'html.parser') title_element = soup.find('h1', id='firstHeading') destination = title_element.get_text(strip=True) if title_element else \"\u041d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e\" description = \"\" content_div = soup.find('div', class_='mw-parser-output') if content_div: for p in content_div.find_all('p'): text = p.get_text(strip=True) if text: description += text + \" \" if len(description) > 1000: break if not description.strip(): description = \"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442.\" with get_session() as session: session.add(Trip(destination=destination, description=description)) session.commit() print(f\"[Process] {destination} \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0430.\") except Exception as e: print(f\"[Process Error] {url}: {e}\") def handle_url_multi(chunk): for url in chunk: parse_and_save(url) def main(): urls = load_urls(\"urls.txt\") num_processes = 5 chunk_size = len(urls) // num_processes chunks = [urls[i * chunk_size: (i + 1) * chunk_size] for i in range(num_processes - 1)] chunks.append(urls[(num_processes - 1) * chunk_size:]) with Pool(processes=num_processes) as pool: pool.map(handle_url_multi, chunks) if __name__ == \"__main__\": import time start = time.time() main() print(f\"\u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f: {time.time() - start:.2f} \u0441\u0435\u043a\") \u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f: 2.07 \u0441\u0435\u043a Async import aiohttp import asyncio from bs4 import BeautifulSoup from db import get_session from models import Trip def load_urls(filename): with open(filename, encoding='utf-8') as f: return [line.strip() for line in f if line.strip()] async def fetch(session, url): try: async with session.get(url, timeout=aiohttp.ClientTimeout(total=10)) as response: return await response.text(), url except Exception as e: print(f\"[Fetch Error] {url}: {e}\") return \"\", url async def parse_and_save(html, url): try: soup = BeautifulSoup(html, 'html.parser') title_element = soup.find('h1', id='firstHeading') destination = title_element.get_text(strip=True) if title_element else \"\u041d\u0435\u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e\" description = \"\" content_div = soup.find('div', class_='mw-parser-output') if content_div: for p in content_div.find_all('p'): text = p.get_text(strip=True) if text: description += text + \" \" if len(description) > 1000: break if not description.strip(): description = \"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442.\" with get_session() as session: session.add(Trip(destination=destination, description=description)) session.commit() print(f\"[Async] {destination} \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0430.\") except Exception as e: print(f\"[Async Error] {url}: {e}\") async def handle_url_async(chunk): async with aiohttp.ClientSession() as session: htmls = await asyncio.gather(*(fetch(session, url) for url in chunk)) await asyncio.gather(*(parse_and_save(html, url) for html, url in htmls if html)) async def main(): urls = load_urls(\"urls.txt\") num_chunks = 5 chunk_size = len(urls) // num_chunks chunks = [urls[i * chunk_size: (i + 1) * chunk_size] for i in range(num_chunks - 1)] chunks.append(urls[(num_chunks - 1) * chunk_size:]) await asyncio.gather(*(handle_url_async(chunk) for chunk in chunks)) if __name__ == \"__main__\": import time start = time.time() asyncio.run(main()) print(f\"\u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f: {time.time() - start:.2f} \u0441\u0435\u043a\") \u0412\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f: 0.11 \u0441\u0435\u043a","title":"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b"},{"location":"task2/#_4","text":"\u041c\u043e\u0436\u043d\u043e \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0432\u044b\u0432\u043e\u0434, \u0447\u0442\u043e \u044d\u0444\u0444\u0435\u043a\u0442\u0438\u0432\u043d\u0435\u0435 \u0432\u0441\u0435\u0433\u043e \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u043f\u043e\u0434\u0445\u043e\u0434, \u043d\u043e \u0431\u044b\u043b\u043e, \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u043c\u0430\u043b\u043e \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430.","title":"\u0412\u044b\u0432\u043e\u0434"}]}